[pytest]
# AI Chief of Staff - Pytest Configuration
# Sprint 1: 80% minimum test coverage requirement

# Test Discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage Configuration
addopts =
    # Coverage
    --cov=backend/app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80

    # Verbosity & Output
    -v
    --tb=short
    --strict-markers
    --disable-warnings

    # Test Execution
    --maxfail=1
    --ff

    # Async Support
    --asyncio-mode=auto

    # Random Order (catch test dependencies)
    --randomly-seed=12345

    # Performance
    -n auto

# Test Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (database, API)
    e2e: End-to-end tests (full workflows)
    slow: Slow running tests
    database: Tests requiring database connection
    mcp: Tests involving MCP integrations
    rls: Row-level security tests
    vector: Vector/embedding tests
    skip_ci: Skip in CI/CD pipeline
    oauth: OAuth flow tests (Sprint 2)
    health: Health monitoring tests (Sprint 2)
    connector: MCP connector tests (Sprint 2)
    meeting: Meeting intelligence tests (Sprint 3)
    llm: LLM/AI processing tests (Sprint 3)
    webhook: Webhook handling tests (Sprint 3)
    accuracy: Accuracy validation tests (Sprint 3)
    summarization: Meeting summarization tests (Sprint 3)
    task_routing: Task routing and creation tests (Sprint 3)
    performance: Performance benchmark tests (Sprint 3)

# Async Configuration
asyncio_mode = auto

# Environment Variables for Testing
env =
    ENVIRONMENT=test
    SUPABASE_URL=http://localhost:54321
    SUPABASE_KEY=test_key_placeholder
    POSTGRES_HOST=localhost
    POSTGRES_PORT=54322
    POSTGRES_DB=postgres
    POSTGRES_USER=postgres
    POSTGRES_PASSWORD=postgres

# Timeout (prevent hanging tests)
timeout = 300
timeout_method = thread

# Ignore patterns
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    venv
    __pycache__
    .venv
    node_modules

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    error
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:factory
