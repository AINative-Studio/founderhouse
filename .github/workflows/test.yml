name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # ============================================================================
  # LINTING AND CODE QUALITY
  # ============================================================================
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black
        run: black --check backend/ tests/
        continue-on-error: false

      - name: Run isort
        run: isort --check-only backend/ tests/
        continue-on-error: false

      - name: Run Flake8
        run: flake8 backend/ tests/ --max-line-length=120 --extend-ignore=E203,W503
        continue-on-error: false

      - name: Run mypy
        run: mypy backend/ --ignore-missing-imports
        continue-on-error: true  # Allow to fail for now

      - name: Run Pylint
        run: pylint backend/app --disable=all --enable=E,W --max-line-length=120
        continue-on-error: true  # Allow to fail for now

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=backend/app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=85 \
            -m "unit"

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unit
          name: unit-tests

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      SUPABASE_URL: http://localhost:54321
      SUPABASE_KEY: test_key_placeholder

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Set up database schema
        run: |
          # Note: Run migrations or schema setup here
          echo "Database schema setup would go here"

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --cov=backend/app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            -m "integration"

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: integration
          name: integration-tests

  # ============================================================================
  # END-TO-END TESTS
  # ============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ \
            -v \
            --cov=backend/app \
            --cov-report=xml \
            --cov-report=term-missing \
            -m "e2e"
        timeout-minutes: 10

      - name: Upload E2E test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: e2e
          name: e2e-tests

  # ============================================================================
  # FULL TEST SUITE WITH COVERAGE
  # ============================================================================
  full-coverage:
    name: Full Test Coverage
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests]
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run all tests with coverage
        run: |
          pytest tests/ \
            -v \
            --cov=backend/app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            -n auto

      - name: Generate coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          coverage-badge -o coverage.svg -f

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: full
          name: full-coverage

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 80

  # ============================================================================
  # MUTATION TESTING (Optional - runs on main only)
  # ============================================================================
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [full-coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run mutation testing
        run: |
          mutmut run --paths-to-mutate=backend/app
        continue-on-error: true
        timeout-minutes: 30

      - name: Generate mutation report
        run: |
          mutmut results
          mutmut html

      - name: Upload mutation report
        uses: actions/upload-artifact@v4
        with:
          name: mutation-report
          path: html/

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: safety check --json || true
        continue-on-error: true

      - name: Run Bandit security linter
        run: bandit -r backend/app -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json

  # ============================================================================
  # TEST SUMMARY
  # ============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, full-coverage]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Unit Tests Status: ${{ needs.unit-tests.result }}"
          echo "Integration Tests Status: ${{ needs.integration-tests.result }}"
          echo "E2E Tests Status: ${{ needs.e2e-tests.result }}"
          echo "Full Coverage Status: ${{ needs.full-coverage.result }}"

      - name: Fail if any test failed
        if: |
          needs.lint.result == 'failure' ||
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure' ||
          needs.e2e-tests.result == 'failure' ||
          needs.full-coverage.result == 'failure'
        run: exit 1
